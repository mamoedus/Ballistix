# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import math
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from scapy.asn1.mib import x509_oids


class MplCanvas(FigureCanvas):
    def __init__(self, parent=None):
        fig = Figure(figsize=(5, 4), dpi=100)
        self.axes = fig.add_subplot(111)
        super().__init__(fig)
        self.setParent(parent)




class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(966, 600)

        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(parent=self.centralwidget)
        self.doubleSpinBox.setGeometry(QtCore.QRect(230, 380, 65, 28))
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(parent=self.centralwidget)
        self.doubleSpinBox_2.setGeometry(QtCore.QRect(230, 440, 65, 28))
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")
        self.doubleSpinBox_2.setMaximum(999999999)
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 390, 91, 19))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 450, 191, 19))
        self.label_2.setObjectName("label_2")
        self.doubleSpinBox_3 = QtWidgets.QDoubleSpinBox(parent=self.centralwidget)
        self.doubleSpinBox_3.setGeometry(QtCore.QRect(230, 500, 65, 28))
        self.doubleSpinBox_3.setObjectName("doubleSpinBox_3")
        self.doubleSpinBox_3.setMaximum(89.999999999999)
        self.doubleSpinBox_3.setMinimum(0.1)
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 510, 141, 19))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(710, 120, 121, 19))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(710, 80, 141, 19))
        self.label_5.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(710, 40, 131, 19))
        self.label_6.setObjectName("label_6")
        self.doubleSpinBox_4 = QtWidgets.QDoubleSpinBox(parent=self.centralwidget)
        self.doubleSpinBox_4.setGeometry(QtCore.QRect(860, 30, 81, 28))
        self.doubleSpinBox_4.setReadOnly(True)
        self.doubleSpinBox_4.setMaximum(99999.99)
        self.doubleSpinBox_4.setObjectName("doubleSpinBox_4")
        self.doubleSpinBox_5 = QtWidgets.QDoubleSpinBox(parent=self.centralwidget)
        self.doubleSpinBox_5.setGeometry(QtCore.QRect(860, 70, 81, 28))
        self.doubleSpinBox_5.setReadOnly(True)
        self.doubleSpinBox_5.setMaximum(9999999.99)
        self.doubleSpinBox_5.setObjectName("doubleSpinBox_5")
        self.doubleSpinBox_6 = QtWidgets.QDoubleSpinBox(parent=self.centralwidget)
        self.doubleSpinBox_6.setEnabled(True)
        self.doubleSpinBox_6.setGeometry(QtCore.QRect(860, 110, 81, 28))
        self.doubleSpinBox_6.setReadOnly(True)
        self.doubleSpinBox_6.setMaximum(9999999.99)
        self.doubleSpinBox_6.setObjectName("doubleSpinBox_6")

        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(650, 410, 291, 141))
        self.pushButton.setObjectName("pushButton")

        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(650, 410, 291, 141))
        self.pushButton.setObjectName("pushButton")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # График
        self.plot_widget = QtWidgets.QWidget(self.centralwidget)
        self.plot_widget.setGeometry(QtCore.QRect(0, 0, 640, 320))
        self.plot_widget.setObjectName("plot_widget")

        self.canvas = MplCanvas(self.plot_widget)
        self.canvas.setGeometry(0, 0, 640, 320)
        self.canvas.axes.clear()
        self.canvas.figure.set_facecolor("#2C2C2C")  # Устанавливаем черный фон
        self.canvas.axes.set_facecolor("#2C2C2C")
        self.canvas.draw()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Ballistix"))
        self.label.setText(_translate("MainWindow", "Вес снаряда"))
        self.label_2.setText(_translate("MainWindow", "Мощность выстрела"))
        self.label_3.setText(_translate("MainWindow", "Угол выстрела"))
        self.label_4.setText(_translate("MainWindow", "Высшая точка "))
        self.label_5.setText(_translate("MainWindow", "Дальность полета"))
        self.label_6.setText(_translate("MainWindow", "Время в полете"))
        self.pushButton.setText(_translate("MainWindow", "Рассчитать"))

    def add_functions(self):
        self.pushButton.clicked.connect(self.write)

    def write(self):
        g=9.81
        angle_ = (self.doubleSpinBox_3.value() * 3.14)/180
        a = self.doubleSpinBox_2.value()
        m= math.sin(angle_)
        time_in_fl = (2*a*m)/(g)
        self.doubleSpinBox_4.setValue(time_in_fl)



        range_=((a**2)*math.sin(2*angle_))/(g)
        print("angle", angle_)
        print("sin",m)
        print("2 sin", math.sin(2*angle_))
        print("sin**2",m*m)
        print("___________________________________________")
        self.doubleSpinBox_5.setValue(range_)

        height_ = (self.doubleSpinBox_2.value() * self.doubleSpinBox_2.value() * math.sin(angle_)* math.sin(angle_)) / (20)
        self.doubleSpinBox_6.setValue(height_)
        if (a != 0):
            if (angle_ != 0):
                self.plot_sine_wave()

    def plot_sine_wave(self):
        # Очищаем старый график
        self.canvas.axes.clear()

        self.canvas.axes.set_facecolor("#2C2C2C")
        self.canvas.figure.set_facecolor("#2C2C2C")
        # Получаем данные из виджетов
        xn = self.doubleSpinBox_5.value() / 2  # x координата вершины (половина дальности полета)
        yn = self.doubleSpinBox_6.value()  # y координата вершины (высшая точка)
        x1 = 0  # первая точка пересечения с осью X
        x2 = self.doubleSpinBox_5.value()  # вторая точка пересечения с осью X (дальность полета)

        # Рассчитываем коэффициент a
        a = -yn / ((x1 - xn) ** 2)  # Коэффициент a для уравнения параболы

        # Определяем максимальные границы графика по X и Y
        x_max = ((int(x2) // 1000) + 1) * 1000  # Округляем вверх до ближайшей тысячи
        y_max = ((int(yn) // 500) + 1) * 500  # Округляем вверх до ближайших 500

        # Генерируем значения x для построения графика
        x_values = [x / 100 for x in range(int(x1 * 100), int(x_max * 100))]

        # Вычисляем значения y на основе уравнения параболы
        y_values = [a * (x - xn) ** 2 + yn for x in x_values]

        # Строим график
        self.canvas.axes.plot(x_values, y_values, label="Парабола полета")

        # Добавляем точки пересечения с осью X и вершину
        self.canvas.axes.scatter([x1, x2], [0, 0], color="red", label="Точки пересечения")
        self.canvas.axes.scatter([xn], [yn], color="blue", label="Вершина")

        # Настраиваем оси
        self.canvas.axes.set_xlim([0, x_max])
        self.canvas.axes.set_ylim([0, y_max])

        # Настраиваем легенду и оси
        self.canvas.axes.axhline(0, color='black', linewidth=0.5)
        self.canvas.axes.axvline(0, color='black', linewidth=0.5)
        self.canvas.axes.grid(color='gray', linestyle='--', linewidth=0.5)
        self.canvas.axes.legend()

        # Перерисовываем график
        self.canvas.draw()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
